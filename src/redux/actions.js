// Action это объекты, которые передают данные из компонентов в стр., тем самым сигнализируя о том, какое событие произошло в интерфейсе. Они являются единственным источником информации для стору.

// const action = {
//     type: "Action type",
//     payload: "Payload value",
//   };

// Экшены должны обладать обязательным свойством  type - строка описывающая тип события в интерфейсе. Кроме свойства  type структура объекта может быть произвольной, однако данные обычно передают в необязательном свойстве  payload. Данными экшена могут быть любое значение кроме функций и классов.

// Создадим экшены, которые будут описывать добавление, удаление и переключение статуса задания, а также изменение значения фильтра.

// const addTask = {
//   type: "tasks/addTask",
//   payload: {
//     id: "Generated id",
//     text: "User entered text",
//     completed: false,
//   },
// };

// const deleteTask = {
//   type: "tasks/deleteTask",
//   payload: "Task id",
// };

// const toggleCompleted = {
//   type: "tasks/toggleCompleted",
//   payload: "Task id",
// };

// const setStatusFilter = {
//   type: "filters/setStatusFilter",
//   payload: "Filter value",
// };

// ЛУЧШИЕ ПРАКТИКИ - НАИМЕНИЕ
// Одна из самых популярных конвенций сборки типа экшена предлагает использовать в значении поля type две части в формате domain/eventName. Первое это имя категории (сущности) к которой принадлежит экшен (tasks и filters), обычно совпадает с именем свойства части состояния Redux, и второе это событие, описывающее экшен (addTask, deleteTask, toggleCompleted, setStatusFilter).

// ЛУЧШИЕ ПРАКТИКИ – МИНИМАЛИЗМ
// Экшены должны нести в себе минимально необходимый набор информации, которого будет достаточно для изменения состояния. Например, при удалении задачи достаточно передать ее идентификатор, а не весь объект задачи целиком.

// Генераторы экшенов

// Экшены это статические объекты, значение свойства  payload которых невозможно задать динамически. Генераторы экшенов (Action Creators) – функции, которые могут принимать аргументы, после чего создают и возвращают экшены с одинаковым значением свойства  type, но разными  payload. Они могут иметь побочные эффекты, например заполнять свойства по умолчанию или генерировать уникальный идентификатор объекта задачи. Создадим генераторы экшенов для нашей программы.

import { nanoid } from "nanoid";

export const addTask = text => {
  return {
    type: "tasks/addTask",
    payload: {
      id: nanoid(),
      completed: false,
      text,
    },
  };
};

export const deleteTask = taskId => {
  return {
    type: "tasks/deleteTask",
    payload: taskId,
  };
};

export const toggleCompleted = taskId => {
  return {
    type: "tasks/toggleCompleted",
    payload: taskId,
  };
};

export const setStatusFilter = value => {
  return {
    type: "filters/setStatusFilter",
    payload: value,
  };
};

// УНИКАЛЬНЫЙ ИДЕНТИФИКАТОР ЗАДАЧИ
// Обратите внимание на генератор экшенов для создания задачи addTask. В будущем присвоением идентификатора будет заниматься бэкенд, а пока сделаем это в нашем коде. Для этого используем библиотеку  nanoid.
