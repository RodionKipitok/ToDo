// Чтобы извлечь данные из строя, компоненты должны подписаться на необходимые им части состояния Redux. Для этого в библиотеке React Redux есть хук  [useSelector(selector)](). Аргументом он принимает функцию, которая объявляет один параметр  stateact-redux.js.org/api/hooks#useselector> – весь объект состояния Redux, который будет автоматически передан функции хуком  useSelector. Эта функция называется селектором и должна вернуть только ту часть состояния, которая необходима компоненту.

// Функции-селекторы

//  Один и тот же  селектор может использоваться в нескольких местах программы, что приводит к дублированию кода, как, например, в наших компонентах  TaskListи  ​​. Чтобы избежать этого и еще больше структурировать код, все функции-селекторы объявляются в отдельном файле, например в  , после чего импортируются в компоненты.StatusFilterTaskCountersrc/redux/selectors.js

export const getTasks = state => state.tasks;

export const getStatusFilter = state => state.filters.status;

// ОДНИЙ ИСТОЧНИК ПРАВДЫ
// Объявление функций-селекторов вне компонентов также хорошо тем, что компоненты не знают о форме состояния Redux, и в случае его изменения достаточно будет отредактировать код одного файла, а не искать селекторы по коду всех компонентов программы.
